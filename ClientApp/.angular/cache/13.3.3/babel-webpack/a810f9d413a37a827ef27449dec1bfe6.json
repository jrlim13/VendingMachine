{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\Jasmin Rose\\\\Documents\\\\Visual Studio 2022\\\\Projects\\\\VendingMachine\\\\VendingMachine\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientModule } from '@angular/common/http';\nimport { By } from '@angular/platform-browser';\nimport { MenuComponent } from './menu.component';\ndescribe('MenuComponent', () => {\n  let component;\n  let fixture;\n  let canServiceSpy;\n  let cansMock = [{\n    \"id\": 1,\n    \"name\": \"Coca-cola Classic 375ml\",\n    \"price\": 2.89,\n    \"stock\": 5,\n    \"imgName\": \"cocaColaClassic.jpg\"\n  }, {\n    \"id\": 2,\n    \"name\": \"Coca-cola No Sugar 375ml\",\n    \"price\": 2.89,\n    \"stock\": 3,\n    \"imgName\": \"cocaColaNoSugar.jpg\"\n  }];\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [MenuComponent],\n      imports: [HttpClientModule],\n      providers: [{\n        provide: 'BASE_URL',\n        useValue: 'http://localhost'\n      }]\n    }).compileComponents();\n  }));\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const canServiceSpy = jasmine.createSpyObj('CanService', ['getUser']);\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, RouterTestingModule],\n      declarations: [UserProfileComponent],\n      providers: [{\n        provide: UserService,\n        useValue: userServiceSpy\n      }],\n      schemas: [CUSTOM_ELEMENTS_SCHEMA]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MenuComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('displays can name', () => {\n    const compiled = fixture.debugElement.query(By.css('#can-1-name'));\n    expect(compiled).toContain(\"Coca-cola\");\n  });\n});","map":{"version":3,"sources":["C:/Users/Jasmin Rose/Documents/Visual Studio 2022/Projects/VendingMachine/VendingMachine/ClientApp/src/app/components/menu/menu.component.spec.ts"],"names":["TestBed","HttpClientModule","By","MenuComponent","describe","component","fixture","canServiceSpy","cansMock","beforeEach","configureTestingModule","declarations","imports","providers","provide","useValue","compileComponents","jasmine","createSpyObj","HttpClientTestingModule","RouterTestingModule","UserProfileComponent","UserService","userServiceSpy","schemas","CUSTOM_ELEMENTS_SCHEMA","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","compiled","debugElement","query","css","toContain"],"mappings":";AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,EAAT,QAAmB,2BAAnB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACAC,QAAQ,CAAC,eAAD,EAAkB,MAAM;AAC5B,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,aAAJ;AACA,MAAIC,QAAQ,GAAG,CACX;AAAE,UAAM,CAAR;AAAW,YAAQ,yBAAnB;AAA8C,aAAS,IAAvD;AAA6D,aAAS,CAAtE;AAAyE,eAAW;AAApF,GADW,EAEX;AAAE,UAAM,CAAR;AAAW,YAAQ,0BAAnB;AAA+C,aAAS,IAAxD;AAA8D,aAAS,CAAvE;AAA0E,eAAW;AAArF,GAFW,CAAf;AAIAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMT,OAAO,CAACU,sBAAR,CAA+B;AACjCC,MAAAA,YAAY,EAAE,CAACR,aAAD,CADmB;AAEjCS,MAAAA,OAAO,EAAE,CAACX,gBAAD,CAFwB;AAGjCY,MAAAA,SAAS,EAAE,CACP;AAAEC,QAAAA,OAAO,EAAE,UAAX;AAAuBC,QAAAA,QAAQ,EAAE;AAAjC,OADO;AAHsB,KAA/B,EAODC,iBAPC,EAAN;AAQH,GATS,EAAV;AAUAP,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMF,aAAa,GAAGU,OAAO,CAACC,YAAR,CAAqB,YAArB,EAAmC,CAAC,SAAD,CAAnC,CAAtB;AACA,UAAMlB,OAAO,CAACU,sBAAR,CAA+B;AACjCE,MAAAA,OAAO,EAAE,CAACO,uBAAD,EAA0BC,mBAA1B,CADwB;AAEjCT,MAAAA,YAAY,EAAE,CAACU,oBAAD,CAFmB;AAGjCR,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,OAAO,EAAEQ,WAAX;AAAwBP,QAAAA,QAAQ,EAAEQ;AAAlC,OAAD,CAHsB;AAIjCC,MAAAA,OAAO,EAAE,CAACC,sBAAD;AAJwB,KAA/B,EAKHT,iBALG,EAAN;AAMH,GARS,EAAV;AASAP,EAAAA,UAAU,CAAC,MAAM;AACbH,IAAAA,OAAO,GAAGN,OAAO,CAAC0B,eAAR,CAAwBvB,aAAxB,CAAV;AACAE,IAAAA,SAAS,GAAGC,OAAO,CAACqB,iBAApB;AACArB,IAAAA,OAAO,CAACsB,aAAR;AACH,GAJS,CAAV;AAKAC,EAAAA,EAAE,CAAC,eAAD,EAAkB,MAAM;AACtBC,IAAAA,MAAM,CAACzB,SAAD,CAAN,CAAkB0B,UAAlB;AACH,GAFC,CAAF;AAGAF,EAAAA,EAAE,CAAC,mBAAD,EAAsB,MAAM;AAC1B,UAAMG,QAAQ,GAAG1B,OAAO,CAAC2B,YAAR,CAAqBC,KAArB,CAA2BhC,EAAE,CAACiC,GAAH,CAAO,aAAP,CAA3B,CAAjB;AACAL,IAAAA,MAAM,CAACE,QAAD,CAAN,CAAiBI,SAAjB,CAA2B,WAA3B;AACH,GAHC,CAAF;AAIH,CAvCO,CAAR","sourcesContent":["import { TestBed } from '@angular/core/testing';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { By } from '@angular/platform-browser';\r\nimport { MenuComponent } from './menu.component';\r\ndescribe('MenuComponent', () => {\r\n    let component;\r\n    let fixture;\r\n    let canServiceSpy;\r\n    let cansMock = [\r\n        { \"id\": 1, \"name\": \"Coca-cola Classic 375ml\", \"price\": 2.89, \"stock\": 5, \"imgName\": \"cocaColaClassic.jpg\" },\r\n        { \"id\": 2, \"name\": \"Coca-cola No Sugar 375ml\", \"price\": 2.89, \"stock\": 3, \"imgName\": \"cocaColaNoSugar.jpg\" },\r\n    ];\r\n    beforeEach(async () => {\r\n        await TestBed.configureTestingModule({\r\n            declarations: [MenuComponent],\r\n            imports: [HttpClientModule],\r\n            providers: [\r\n                { provide: 'BASE_URL', useValue: 'http://localhost' },\r\n            ]\r\n        })\r\n            .compileComponents();\r\n    });\r\n    beforeEach(async () => {\r\n        const canServiceSpy = jasmine.createSpyObj('CanService', ['getUser']);\r\n        await TestBed.configureTestingModule({\r\n            imports: [HttpClientTestingModule, RouterTestingModule],\r\n            declarations: [UserProfileComponent],\r\n            providers: [{ provide: UserService, useValue: userServiceSpy }],\r\n            schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n        }).compileComponents();\r\n    });\r\n    beforeEach(() => {\r\n        fixture = TestBed.createComponent(MenuComponent);\r\n        component = fixture.componentInstance;\r\n        fixture.detectChanges();\r\n    });\r\n    it('should create', () => {\r\n        expect(component).toBeTruthy();\r\n    });\r\n    it('displays can name', () => {\r\n        const compiled = fixture.debugElement.query(By.css('#can-1-name'));\r\n        expect(compiled).toContain(\"Coca-cola\");\r\n    });\r\n});\r\n"]},"metadata":{},"sourceType":"module"}